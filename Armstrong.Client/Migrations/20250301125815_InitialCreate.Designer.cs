// <auto-generated />
using System;
using Armstrong.Client.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Armstrong.Client.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250301125815_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Armstrong.Client.Models.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("ChannelConsumption")
                        .HasColumnType("double precision")
                        .HasColumnName("consumption");

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer")
                        .HasColumnName("channel_id");

                    b.Property<string>("ChannelName")
                        .HasColumnType("text")
                        .HasColumnName("name_controlpoint");

                    b.Property<int>("ChannelPowerState")
                        .HasColumnType("integer")
                        .HasColumnName("on_off");

                    b.Property<bool>("ChannelSpecialControl")
                        .HasColumnType("boolean")
                        .HasColumnName("special_control");

                    b.Property<int>("ChannelState")
                        .HasColumnType("integer")
                        .HasColumnName("state_for_threeview");

                    b.Property<double>("ConvertCoefficient")
                        .HasColumnType("double precision")
                        .HasColumnName("coefficient");

                    b.Property<double>("DeviceCalibrateMax")
                        .HasColumnType("double precision")
                        .HasColumnName("max_nuclid_value");

                    b.Property<double>("DeviceCalibrateMin")
                        .HasColumnType("double precision")
                        .HasColumnName("min_nuclid_value");

                    b.Property<string>("DeviceLocation")
                        .HasColumnType("text")
                        .HasColumnName("name_location");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text")
                        .HasColumnName("name_db");

                    b.Property<double>("DeviceSelfBackground")
                        .HasColumnType("double precision")
                        .HasColumnName("background");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<double>("EmgLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("accident");

                    b.Property<int>("ErrorEventCount")
                        .HasColumnType("integer")
                        .HasColumnName("error_count");

                    b.Property<int>("EventCount")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("event_date");

                    b.Property<double>("ImpulsesEventValue")
                        .HasColumnType("double precision")
                        .HasColumnName("value_impulses");

                    b.Property<double>("NotSystemEventValue")
                        .HasColumnType("double precision")
                        .HasColumnName("value_cu");

                    b.Property<double>("PreEmgLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("pre_accident");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.Property<double>("SystemEventValue")
                        .HasColumnType("double precision")
                        .HasColumnName("event_value");

                    b.Property<string>("Unit")
                        .HasColumnType("text")
                        .HasColumnName("unit");

                    b.HasKey("Id");

                    b.ToTable("channels");
                });

            modelBuilder.Entity("Armstrong.Client.Models.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("channel_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("event_date");

                    b.Property<double>("SystemEventValue")
                        .HasColumnType("double precision")
                        .HasColumnName("event_value");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("histories");
                });

            modelBuilder.Entity("Armstrong.Client.Models.History", b =>
                {
                    b.HasOne("Armstrong.Client.Models.Channel", "Channel")
                        .WithMany("History")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Armstrong.Client.Models.Channel", b =>
                {
                    b.Navigation("History");
                });
#pragma warning restore 612, 618
        }
    }
}
